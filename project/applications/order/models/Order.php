<?php

/**
 * Order
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Order extends BaseOrder
{

    static public function get_by_id_and_workflow($id, $workflow) {
        $id = abs(intval($id));
        
        $query = Doctrine_Query::create()
                               ->select('o.*, c.*, w.*, os.*, cs.*')
                               ->from('Order o')
                               ->leftJoin('o.Workflow w')
                               ->leftJoin('o.Customer c')
                               ->leftJoin('o.CustomerService cs')
                               ->leftJoin('o.Seller os')
                               ->where('o.id = ?', $id);
        if($workflow instanceof Workflow) {
            $query->where('o.Workflow = ?', $workflow);
        } else {
            $query->where('o.workflow_id = ?', $workflow);
        }

        return $query->fetchOne();
                               
    }

    static public function get_by_customer($customer_id) {
        return Doctrine_Query::create()
                               ->select('o.*, w.*, c.*, oc.*, cs.*, os.*')
                               ->from('Order o')
                               ->leftJoin('o.Workflow w')
                               ->leftJoin('o.Customer c')
                               ->leftJoin('o.Communication oc')
                               ->leftJoin('o.CustomerService cs')
                               ->leftJoin('o.Seller os')
                               ->where('o.customer_id = ?', $customer_id)
                               ->fetchArray();
    }

    /*
     * 
     */
    static public function get_by_id($id) {
        $id = abs(intval($id));
        return Doctrine_Query::create()
                               ->select('o.*, c.*, w.*, os.*, cs.*, oc.*, oss.*')
                               ->from('Order o')
                               ->leftJoin('o.Workflow w')
                               ->leftJoin('o.Solution oss')
                               ->leftJoin('o.Customer c')
                               ->leftJoin('o.Payment op')
                               ->leftJoin('o.Communication oc')
                               ->leftJoin('o.CustomerService cs')
                               ->leftJoin('o.Seller os')
                               ->where('o.id = ?', $id)
                               ->orderBy('op.id ASC')
                               ->addOrderBy('oss.state DESC')
                               ->fetchOne();
    }

    /*
     * Order::get_list()
     * @params integer $workflow_id
     * @params integer $payment
     * @params string $payment_type
     *
     * 获取订单列表
     * payment: 0 - 默认不以是否付款为条件
     * payment: 1 - 获取已经付款的订单
     * payment: 2 - 获取未付款的订单
     */
    static public function get_list($workflow_id, $user_id = null, $user_role = null, $payment = false, $payment_type = false) {
        
        $query = Doctrine_Query::create()
                             ->select('o.*, c.*, w.*, os.*, cs.*, op.*')
                             ->from('Order o')
                             ->leftJoin('o.Workflow w')
                             ->leftJoin('o.Customer c')
                             ->leftJoin('o.CustomerService cs')
                             ->leftJoin('o.Seller os')
                             ->leftJoin('o.Payment op');

        if(is_array($workflow_id)){
            $workflow_id = implode(',', $workflow_id);
            $query->where('o.workflow_id IN (0,'.$workflow_id.')');
        } else {
            $query->where('o.workflow_id = ? ', $workflow_id);
        }

        $roles = array(
            '销售经理'=> 'seller_id',
            '销售顾问'=> 'seller_id',
            '设计师'=> 'designer_id',
            '布局师'=> 'layouter_id',
            '程序员'=> 'programmer'
        );

        if($user_role && $user_id && array_key_exists($user_role, $roles)) {
           $query->addWhere(sprintf('o.%s = ?', $roles[$user_role]), $user_id);
        }

        if($payment !== false && $payment_type) {
            $query->addWhere('op.type = ?', $payment_type);
            $query->addWhere('op.is_payed = ?', $payment);
        }


        $query->orderBy('o.id DESC');

        return $query->fetchArray();
    }

    /*
     * Order::get_workflow()
     * @param integer $order_id
     * @return string
     *
     * 获取当前订单的所处的工作流程
     */
    static public function get_workflow($order_id) {
        return Doctrine_Query::create()
                             ->select('w.*, o.*')
                             ->from('Order o')
                             ->leftJoin('o.Workflow w')
                             ->where('o.id = ?', $order_id)
                             ->fetchOne();
    }

    /*
     * 设置当前订单的工作状态
     */
    static public function set_workflow($order_id, $workflow) {
        if($order_id instanceof Order) {
            $order = $order_id;
        } else {
            $order = self::get_by_id($order_id);
        }
        
        if($workflow instanceof Workflow) {
            $order->Workflow = $workflow;
        } else {
            $order->workflow_id = $workflow;
        }
        return $order->save();
    }


    /*
     * 用户对当前订单是否有查看权限
     * 1. 当前工作流程
     */
    static public function has_role($order_id, $user_info) {

    }

}