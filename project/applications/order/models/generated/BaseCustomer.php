<?php

/**
 * BaseCustomer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $type
 * @property integer $group_id
 * @property string $areas
 * @property string $name
 * @property string $duty
 * @property string $company_name
 * @property string $telephone
 * @property string $mobile
 * @property string $qq
 * @property string $email
 * @property string $zip_no
 * @property string $address
 * @property datetime $subscribe_time
 * @property string $example_url
 * @property string $docs
 * @property string $community_log
 * @property string $remark
 * @property string $com_username
 * @property string $com_email
 * @property string $com_address
 * @property string $com_code
 * @property string $com_code2
 * @property text $other_info
 * @property Doctrine_Collection $Order
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCustomer extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('customers');
        
        $this->hasColumn('areas', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('duty', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('company_name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('telephone', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('docs', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('mobile', 'string', 15, array(
             'type' => 'string',
             'length' => '15',
             ));
        $this->hasColumn('qq', 'string', 15, array(
             'type' => 'string',
             'length' => '15',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('card_no', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('zip_no', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('remark', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('com_username', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('com_email', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('com_address', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('com_code', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('com_code2', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('other_info', 'text', null, array(
             'type' => 'text',
             ));
        $this->hasColumn('customer_user_id', 'integer', 4, array(
             'type' => 'integer', 'length'=>'4'
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Order', array(
             'local' => 'id',
             'foreign' => 'customer_id'));
        $this->hasOne('User as CustomerUser', array(
            'local'=> 'customer_user_id',
            'foreign'=> 'id'
        ));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}