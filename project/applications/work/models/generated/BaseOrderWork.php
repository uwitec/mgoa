<?php

/**
 * BaseOrderWork
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $order_id
 * @property integer $user_id
 * @property string $type
 * @property integer $process
 * @property text $content
 * @property Order $Order
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseOrderWork extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('order_work');
        $this->hasColumn('order_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('user_id', 'integer', 11, array(
             'type' => 'integer',
             'length' => '11',
             ));
        $this->hasColumn('type', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             ));
        $this->hasColumn('process', 'integer', 3, array(
             'type' => 'integer',
             'length' => '3',
             ));
        $this->hasColumn('content', 'text', null, array(
             'type' => 'text',
             ));


        $this->index('query', array(
             'fields' => 
             array(
              0 => 'order_id',
              1 => 'user_id',
              2 => 'type',
              3 => 'process',
             ),
             ));
        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Order', array(
             'local' => 'order_id',
             'foreign' => 'id'));
        $this->hasOne('User', array(
            'local' => 'user_id',
            'foreign' => 'id'
        ));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}